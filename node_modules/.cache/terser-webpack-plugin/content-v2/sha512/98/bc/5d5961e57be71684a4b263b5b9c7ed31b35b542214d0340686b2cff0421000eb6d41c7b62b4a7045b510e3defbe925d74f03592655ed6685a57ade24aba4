{"code":"window.rgbKineticSlider=function(e){(e=e||{}).slideImages=e.hasOwnProperty(\"slideImages\")?e.slideImages:[],e.itemsTitles=e.hasOwnProperty(\"itemsTitles\")?e.itemsTitles:[],e.backgroundDisplacementSprite=e.hasOwnProperty(\"backgroundDisplacementSprite\")?e.backgroundDisplacementSprite:\"\",e.cursorDisplacementSprite=e.hasOwnProperty(\"cursorDisplacementSprite\")?e.cursorDisplacementSprite:\"\",e.cursorImgEffect=!e.hasOwnProperty(\"cursorImgEffect\")||e.cursorImgEffect,e.cursorTextEffect=!e.hasOwnProperty(\"cursorTextEffect\")||e.cursorTextEffect,e.cursorScaleIntensity=e.hasOwnProperty(\"cursorScaleIntensity\")?e.cursorScaleIntensity:.25,e.cursorMomentum=e.hasOwnProperty(\"cursorMomentum\")?e.cursorMomentum:.14,e.swipe=!e.hasOwnProperty(\"swipe\")||e.swipe,e.swipeDistance=e.hasOwnProperty(\"swipeDistance\")?e.swipeDistance:500,e.slideTransitionDuration=e.hasOwnProperty(\"slideTransitionDuration\")?e.slideTransitionDuration:1,e.transitionScaleIntensity=e.hasOwnProperty(\"transitionScaleIntensity\")?e.transitionScaleIntensity:40,e.transitionScaleAmplitude=e.hasOwnProperty(\"transitionScaleAmplitude\")?e.transitionScaleAmplitude:300,e.swipeScaleIntensity=e.hasOwnProperty(\"swipeScaleIntensity\")?e.swipeScaleIntensity:.3,e.transitionSpriteRotation=e.hasOwnProperty(\"transitionSpriteRotation\")?e.transitionSpriteRotation:0,e.nav=!e.hasOwnProperty(\"nav\")||e.nav,e.textsRgbEffect=!e.hasOwnProperty(\"textsRgbEffect\")||e.textsRgbEffect,e.imagesRgbEffect=!!e.hasOwnProperty(\"imagesRgbEffect\")&&e.imagesRgbEffect,e.textsSubTitleDisplay=!!e.hasOwnProperty(\"textsSubTitleDisplay\")&&e.textsSubTitleDisplay,e.textsDisplay=!!e.hasOwnProperty(\"textsDisplay\")&&e.textsDisplay,e.textsTiltEffect=!e.hasOwnProperty(\"textsTiltEffect\")||e.textsTiltEffect,e.googleFonts=e.hasOwnProperty(\"googleFonts\")?e.googleFonts:[\"Roboto:400\"],e.buttonMode=!e.hasOwnProperty(\"buttonMode\")||e.buttonMode,e.textTitleColor=e.hasOwnProperty(\"textTitleColor\")?e.textTitleColor:\"white\",e.textTitleSize=e.hasOwnProperty(\"textTitleSize\")?e.textTitleSize:125,e.mobileTextTitleSize=e.hasOwnProperty(\"mobileTextTitleSize\")?e.mobileTextTitleSize:45,e.textTitleLetterspacing=e.hasOwnProperty(\"textTitleLetterspacing\")?e.textTitleLetterspacing:3,e.textSubTitleColor=e.hasOwnProperty(\"textSubTitleColor\")?e.textSubTitleColor:\"white\",e.textSubTitleSize=e.hasOwnProperty(\"textSubTitleSize\")?e.textSubTitleSize:21,e.mobileTextSubTitleSize=e.hasOwnProperty(\"mobileTextSubTitleSize\")?e.mobileTextSubTitleSize:14,e.textSubTitleLetterspacing=e.hasOwnProperty(\"textSubTitleLetterspacing\")?e.textSubTitleLetterspacing:3,e.textSubTitleOffsetTop=e.hasOwnProperty(\"textSubTitleOffsetTop\")?e.textSubTitleOffsetTop:120,e.mobileTextSubTitleOffsetTop=e.hasOwnProperty(\"mobileTextSubTitleOffsetTop\")?e.mobileTextSubTitleOffsetTop:40,e.textsRgbIntensity=e.hasOwnProperty(\"textsRgbIntensity\")?e.textsRgbIntensity:.09,e.navTextsRgbIntensity=e.hasOwnProperty(\"navTextsRgbIntensity\")?e.navTextsRgbIntensity:10,e.imagesRgbIntensity=e.hasOwnProperty(\"imagesRgbIntensity\")?e.imagesRgbIntensity:.9,e.navImagesRgbIntensity=e.hasOwnProperty(\"navImagesRgbIntensity\")?e.navImagesRgbIntensity:100,PIXI.utils.skipHello();const t=new PIXI.autoDetectRenderer(1920,1080,{transparent:!0,autoResize:!0,resolution:devicePixelRatio}),i=document.getElementById(\"rgbKineticSlider\"),n=new PIXI.Container,s=new PIXI.Container,r=new PIXI.Container,o=new PIXI.Container,a=new PIXI.Container,l=new PIXI.Sprite.from(e.backgroundDisplacementSprite),c=new PIXI.filters.DisplacementFilter(l),g=PIXI.Sprite.from(e.cursorDisplacementSprite),p=new PIXI.filters.DisplacementFilter(g),u=new PIXI.filters.RGBSplitFilter,T=new PIXI.filters.RGBSplitFilter;let d,w,x,f,m,y,h,b,I=0,S=!1,P=0,O=!1,R=!1,D=!1,v=0,E=0,M=0,X=0,z=0,C=0;function F(){if(e.itemsTitles.length>0&&1==e.textsDisplay){window.innerWidth<768?(y=e.mobileTextTitleSize,h=e.mobileTextSubTitleSize,b=e.mobileTextSubTitleOffsetTop):(y=e.textTitleSize,h=e.textSubTitleSize,b=e.textSubTitleOffsetTop);for(let n=0;n<e.itemsTitles.length;n++){let s,r=e.googleFonts[0].split(\":\")[0];s=window.innerWidth<768?1.5*window.innerWidth:window.innerWidth/2;let a=e.googleFonts[0].split(\":\").pop();if(textTitles=new PIXI.Text(e.itemsTitles[n][0],{fontFamily:r,fontSize:y,fontWeight:a,fill:e.textTitleColor,align:\"left\",padding:0,wordWrap:!0,wordWrapWidth:s,letterSpacing:e.textTitleLetterspacing}),textTitles.anchor.set(.5),textTitles.x=t.width/2,textTitles.y=t.height/2,o.addChild(textTitles),TweenMax.set(textTitles,{alpha:0}),1==e.buttonMode){function i(){}textTitles.interactive=!0,textTitles.buttonMode=!0,textTitles.on(\"pointerdown\",i)}}if(f=o.children,1==e.textsSubTitleDisplay){for(let i=0;i<e.itemsTitles.length;i++){let n,s=e.googleFonts[1].split(\":\")[0],r=e.googleFonts[1].split(\":\").pop();n=window.innerWidth<768?t.width/1.5:t.width/2,textTitles2=new PIXI.Text(e.itemsTitles[i][1],{fontFamily:s,fontSize:h,fontWeight:r,fill:e.textSubTitleColor,align:\"left\",wordWrap:!0,wordWrapWidth:n,letterSpacing:e.textSubTitleLetterspacing}),textTitles2.anchor.set(.5),textTitles2.x=textTitles.x,textTitles2.y=textTitles.y+b,a.addChild(textTitles2),TweenMax.set(textTitles2,{alpha:0})}m=a.children}}}function W(i){var n;l.anchor.set(.5),l.x=t.view.width/2,l.y=t.view.height/2,timelineTransition=new TimelineMax({onStart:function(){O=!0,S=!1,l.rotation=0},onComplete:function(){1==e.textsRgbEffect&&(u.red=[0,0],u.green=[0,0],u.blue=[0,0]),1==e.imagesRgbEffect&&(T.red=[0,0],T.green=[0,0],T.blue=[0,0]),O=!1,S=!1,D=!0,I=i},onUpdate:function(){l.rotation=e.transitionSpriteRotation,l.scale.set(timelineTransition.progress()*e.transitionScaleIntensity),!0===D&&(1==e.textsRgbEffect&&(timelineTransition.progress()<.5?(u.red=[timelineTransition.progress()*e.navTextsRgbIntensity,0],u.green=[0,0],u.blue=[-timelineTransition.progress(),0]):(u.red=[-(e.navTextsRgbIntensity-timelineTransition.progress()*e.navTextsRgbIntensity),0],u.green=[0,0],u.blue=[e.navTextsRgbIntensity-timelineTransition.progress()*e.navTextsRgbIntensity,0])),1==e.imagesRgbEffect&&(timelineTransition.progress()<.5?(T.red=[-timelineTransition.progress()*e.navImagesRgbIntensity,0],T.green=[0,0],T.blue=[timelineTransition.progress(),0]):(T.red=[-(e.navImagesRgbIntensity-timelineTransition.progress()*e.navImagesRgbIntensity),0],T.green=[0,0],T.blue=[e.navImagesRgbIntensity-timelineTransition.progress()*e.navImagesRgbIntensity,0])))}}),timelineTransition.clear(),timelineTransition.isActive()||(n=!1===D?0:e.transitionScaleAmplitude,1==e.textsSubTitleDisplay&&1==e.textsDisplay&&e.itemsTitles.length>0?timelineTransition.to(c.scale,e.slideTransitionDuration,{x:n,y:n,ease:Power2.easeIn}).to([x[I],f[I],m[I]],e.slideTransitionDuration,{alpha:0,ease:Power2.easeOut},.5*e.slideTransitionDuration).to([x[i],f[i],m[i]],e.slideTransitionDuration,{alpha:1,ease:Power2.easeOut},.5*e.slideTransitionDuration).to(c.scale,e.slideTransitionDuration,{x:0,y:0,ease:Power1.easeOut},e.slideTransitionDuration):0==e.textsSubTitleDisplay&&1==e.textsDisplay&&e.itemsTitles.length>0?timelineTransition.to(c.scale,e.slideTransitionDuration,{x:n,y:n,ease:Power2.easeIn}).to([x[I],f[I]],e.slideTransitionDuration,{alpha:0,ease:Power2.easeOut},.5*e.slideTransitionDuration).to([x[i],f[i]],e.slideTransitionDuration,{alpha:1,ease:Power2.easeOut},.5*e.slideTransitionDuration).to(c.scale,e.slideTransitionDuration,{x:0,y:0,ease:Power1.easeOut},e.slideTransitionDuration):timelineTransition.to(c.scale,e.slideTransitionDuration,{x:n,y:n,ease:Power2.easeIn}).to(x,e.slideTransitionDuration,{alpha:0,ease:Power2.easeOut},.5*e.slideTransitionDuration).to([x[i]],e.slideTransitionDuration,{alpha:1,ease:Power2.easeOut},.5*e.slideTransitionDuration).to(c.scale,e.slideTransitionDuration,{x:0,y:0,ease:Power1.easeOut},e.slideTransitionDuration))}function L(){w=requestAnimationFrame(L),E<=0||v<=0||v>=window.innerWidth-2||E>=window.innerHeight-2?(R=!1,v=M=window.innerWidth/2,E=X=window.innerHeight/2,z=C=newkineX=newkineY=0):R=!0,M+=(v-M)*e.cursorMomentum,X+=(E-X)*e.cursorMomentum,z=Math.floor(v-M),C=Math.floor(E-X),1==e.textsTiltEffect&&function(i,n,s){e.itemsTitles.length>0&&1==e.textsDisplay&&(TweenMax.to(f[i],2,{x:t.width/2-.1*n,y:t.height/2-.2*s,ease:Expo.easeOut}),1==e.textsSubTitleDisplay&&TweenMax.to(m[i],2,{x:t.width/2-.25*n,y:t.height/2+b-.2*s,ease:Expo.easeOut}))}(I,z,C),!0===R&&(g.x=M,g.y=X,TweenMax.to(p.scale,.5,{x:z*e.cursorScaleIntensity,y:C*e.cursorScaleIntensity,ease:Power4.easeOut})),O&&(l.x=M,l.y=X),S&&(l.x=M,l.y=X,c.x=M,c.y=X,c.scale.x=z*e.swipeScaleIntensity,c.scale.y=C*e.swipeScaleIntensity,1==e.textsRgbEffect&&(u.red=[z*e.textsRgbIntensity,0],u.green=[0,0],u.blue=[-z*e.textsRgbIntensity,0]),1==e.imagesRgbEffect&&(T.red=[z*e.imagesRgbIntensity,0],T.green=[0,0],T.blue=[-z*e.imagesRgbIntensity,0]))}if(function(){let e=document.createElement(\"script\");e.src=(\"https:\"===document.location.protocol?\"https\":\"http\")+\"://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js\",e.type=\"text/javascript\",e.async=\"true\";let t=document.getElementsByTagName(\"script\")[0];t.parentNode.insertBefore(e,t)}(),1==e.nav){let t=document.querySelectorAll(\".main-nav\");for(let i=0;i<t.length;i++)t[i].onclick=function(t){if(O)return!1;const i=document.querySelector(\".active\");return i&&i.classList.remove(\"active\"),this.classList.add(\"active\"),\"next\"===this.getAttribute(\"data-nav\")?I>=0&&I<e.slideImages.length-1?W(I+1):W(0):I>0&&I<e.slideImages.length?W(I-1):W(e.slideImages.length-1),!1}}function k(){function w(){window.innerWidth,F(),t.render(n)}t.resize(1920,1080),i.appendChild(t.view),n.filters=[c],s.interactive=!0,1==e.textsRgbEffect&&(o.filters=[u],a.filters=[u],u.red=[0,0],u.green=[0,0],u.blue=[0,0]),1==e.cursorTextEffect&&(o.filters=[p,u],a.filters=[p,u]),1==e.imagesRgbEffect&&1==e.cursorImgEffect?(1==e.cursorImgEffect?r.filters=[p,T]:r.filters=[T],T.red=[0,0],T.green=[0,0],T.blue=[0,0]):1==e.cursorImgEffect&&(r.filters=[p]),l.texture.baseTexture.wrapMode=PIXI.WRAP_MODES.REPEAT,c.autoFit=!1,c.padding=0,g.anchor.set(.5),p.scale.x=0,p.scale.y=0,t.view.style.objectFit=\"cover\",t.view.style.width=\"100%\",t.view.style.height=\"100%\",t.view.style.top=\"50%\",t.view.style.left=\"50%\",t.view.style.webkitTransform=\"translate( -50%, -50% ) scale(1.15)\",t.view.style.transform=\"translate( -50%, -50% ) scale(1.15)\",s.addChild(r,o,a,g),n.addChild(s,l),d=new PIXI.Ticker,d.autoStart=!0,d.add((function(e){t.render(n)})),function(){for(let i=0;i<e.slideImages.length;i++)texture=new PIXI.Texture.from(e.slideImages[i]),imgSprite=new PIXI.Sprite(texture),imgSprite.anchor.set(.5),imgSprite.x=t.width/2,imgSprite.y=t.height/2,TweenMax.set(imgSprite,{alpha:0}),r.addChild(imgSprite);x=r.children}(),w(),window.addEventListener(\"mousemove\",(function(e){v=e.clientX,E=e.clientY})),window.addEventListener(\"touchmove\",(function(e){v=e.touches[0].clientX,E=e.touches[0].clientY})),L(),1==e.swipe&&s.on(\"pointerdown\",(function(t){O||(this.data=t.data,P=this.data.getLocalPosition(this.parent),S=!0,1==e.textsRgbEffect&&(u.red=[0,0],u.green=[0,0],u.blue=[0,0]),1==e.imagesRgbEffect&&(T.red=[0,0],T.green=[0,0],T.blue=[0,0]))})).on(\"pointerup\",(function(){O||(1==e.textsRgbEffect&&(u.red=[0,0],u.green=[0,0],u.blue=[0,0]),1==e.imagesRgbEffect&&(T.red=[0,0],T.green=[0,0],T.blue=[0,0]),TweenMax.to(c.scale,.5,{x:0,y:0,ease:Power4.easeOut}),TweenMax.to(c,.5,{x:M,y:X,ease:Power4.easeOut}),this.data=null,S=!1)})).on(\"pointermove\",(function(){if(!O&&S){let t=this.data.getLocalPosition(this.parent);P.x-t.x<-e.swipeDistance&&(I>=0&&I<e.slideImages.length-1?W(I+1):W(0)),P.x-t.x>e.swipeDistance&&(I>0&&I<e.slideImages.length?W(I-1):W(e.slideImages.length-1))}})),W(I),window.addEventListener(\"resize\",w)}window.WebFontConfig={google:{families:e.googleFonts},active:function(){imagesLoaded(images,(function(){document.body.classList.remove(\"loading\"),k()}))}}};","name":"js/rgbKineticSlider.js","input":"(function() {\n\n    window.rgbKineticSlider = function(options) {\n\n        ///////////////////////////////    \n\n        //  OPTIONS\n\n        /////////////////////////////// \n\n        options = options || {};\n        options.slideImages = options.hasOwnProperty('slideImages') ? options.slideImages : [];\n        options.itemsTitles = options.hasOwnProperty('itemsTitles') ? options.itemsTitles : [];\n        options.backgroundDisplacementSprite = options.hasOwnProperty('backgroundDisplacementSprite') ? options.backgroundDisplacementSprite : '';\n        options.cursorDisplacementSprite = options.hasOwnProperty('cursorDisplacementSprite') ? options.cursorDisplacementSprite : '';\n        options.cursorImgEffect = options.hasOwnProperty('cursorImgEffect') ? options.cursorImgEffect : true;\n        options.cursorTextEffect = options.hasOwnProperty('cursorTextEffect') ? options.cursorTextEffect : true;\n        options.cursorScaleIntensity = options.hasOwnProperty('cursorScaleIntensity') ? options.cursorScaleIntensity : 0.25;\n        options.cursorMomentum = options.hasOwnProperty('cursorMomentum') ? options.cursorMomentum : 0.14;\n        options.swipe = options.hasOwnProperty('swipe') ? options.swipe : true;\n        options.swipeDistance = options.hasOwnProperty('swipeDistance') ? options.swipeDistance : 500;\n        options.slideTransitionDuration = options.hasOwnProperty('slideTransitionDuration') ? options.slideTransitionDuration : 1;\n        options.transitionScaleIntensity= options.hasOwnProperty('transitionScaleIntensity') ? options.transitionScaleIntensity : 40;\n        options.transitionScaleAmplitude= options.hasOwnProperty('transitionScaleAmplitude') ? options.transitionScaleAmplitude : 300;\n        options.swipeScaleIntensity= options.hasOwnProperty('swipeScaleIntensity') ? options.swipeScaleIntensity : 0.3;\n        options.transitionSpriteRotation= options.hasOwnProperty('transitionSpriteRotation') ? options.transitionSpriteRotation : 0;\n        options.nav = options.hasOwnProperty('nav') ? options.nav : true;\n        options.textsRgbEffect = options.hasOwnProperty('textsRgbEffect') ? options.textsRgbEffect : true;\n        options.imagesRgbEffect = options.hasOwnProperty('imagesRgbEffect') ? options.imagesRgbEffect : false; \n        options.textsSubTitleDisplay = options.hasOwnProperty('textsSubTitleDisplay') ? options.textsSubTitleDisplay : false;\n        options.textsDisplay = options.hasOwnProperty('textsDisplay') ? options.textsDisplay : false; \n        options.textsTiltEffect = options.hasOwnProperty('textsTiltEffect') ? options.textsTiltEffect : true; \n        options.googleFonts = options.hasOwnProperty('googleFonts') ? options.googleFonts : ['Roboto:400'];\n        options.buttonMode = options.hasOwnProperty('buttonMode') ? options.buttonMode : true;\n        options.textTitleColor = options.hasOwnProperty('textTitleColor') ? options.textTitleColor : 'white'; \n        options.textTitleSize = options.hasOwnProperty('textTitleSize') ? options.textTitleSize : 125;\n        options.mobileTextTitleSize = options.hasOwnProperty('mobileTextTitleSize') ? options.mobileTextTitleSize : 45;\n        options.textTitleLetterspacing = options.hasOwnProperty('textTitleLetterspacing') ? options.textTitleLetterspacing : 3; \n        options.textSubTitleColor = options.hasOwnProperty('textSubTitleColor') ? options.textSubTitleColor : 'white'; \n        options.textSubTitleSize = options.hasOwnProperty('textSubTitleSize') ? options.textSubTitleSize : 21; \n        options.mobileTextSubTitleSize = options.hasOwnProperty('mobileTextSubTitleSize') ? options.mobileTextSubTitleSize : 14;\n        options.textSubTitleLetterspacing = options.hasOwnProperty('textSubTitleLetterspacing') ? options.textSubTitleLetterspacing : 3; \n        options.textSubTitleOffsetTop = options.hasOwnProperty('textSubTitleOffsetTop') ? options.textSubTitleOffsetTop : 120; \n        options.mobileTextSubTitleOffsetTop = options.hasOwnProperty('mobileTextSubTitleOffsetTop') ? options.mobileTextSubTitleOffsetTop : 40; \n        options.textsRgbIntensity = options.hasOwnProperty('textsRgbIntensity') ? options.textsRgbIntensity : 0.09;\n        options.navTextsRgbIntensity = options.hasOwnProperty('navTextsRgbIntensity') ? options.navTextsRgbIntensity : 10; \n        options.imagesRgbIntensity = options.hasOwnProperty('imagesRgbIntensity') ? options.imagesRgbIntensity : 0.9;\n        options.navImagesRgbIntensity= options.hasOwnProperty('navImagesRgbIntensity') ? options.navImagesRgbIntensity : 100;\n\n        ///////////////////////////////    \n\n        //  PIXI letS\n\n        ///////////////////////////////\n\n        let imgWidth = 1920;\n        let imgHeight = 1080;\n\n        // remove pixi message in console\n        PIXI.utils.skipHello();\n\n        const renderer = new PIXI.autoDetectRenderer(imgWidth,imgHeight, {\n            transparent: true,\n            autoResize: true,\n            resolution: devicePixelRatio,\n        }); \n\n        const canvas = document.getElementById(\"rgbKineticSlider\");\n        const stage = new PIXI.Container();\n        const mainContainer = new PIXI.Container();\n        const imagesContainer = new PIXI.Container();\n        const textsContainer = new PIXI.Container();\n        const textsSubContainer = new PIXI.Container();\n\n        // displacement variables used for slides transition \n        const dispSprite = new PIXI.Sprite.from(options.backgroundDisplacementSprite );\n        const dispFilter = new PIXI.filters.DisplacementFilter(dispSprite);\n\n        // displacement variables used for cursor moving effect\n        const dispSprite_2 = PIXI.Sprite.from(options.cursorDisplacementSprite);\n        const dispFilter_2 = new PIXI.filters.DisplacementFilter(dispSprite_2);\n\n        // colors filters\n        const splitRgb = new PIXI.filters.RGBSplitFilter;\n        const splitRgbImgs = new PIXI.filters.RGBSplitFilter;\n        \n        // main elements\n        let render; // pixi render\n        let mainLoopID; // raf\n\n        let slideImages;\n        let slideTexts;\n        let slideTextsSub;\n\n        // slide index\n        let currentIndex = 0;\n        // swipping flag\n        let is_swipping = false;\n        let drag_start = 0;\n        // transition flag\n        let is_playing = false;\n        // movig flag\n        let is_moving = false;\n        // load flag\n        let is_loaded = false;\n\n        // set some variables for mouseposition and moving effect\n        let posx = 0,\n            posy = 0,\n            vx = 0,\n            vy = 0,\n            kineX = 0,\n            kineY = 0;\n\n        // include the web-font loader script dynamically\n        (function() {\n            let wf = document.createElement('script');\n            wf.src = (document.location.protocol === 'https:' ? 'https' : 'http') +\n                '://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';\n            wf.type = 'text/javascript';\n            wf.async = 'true';\n            let s = document.getElementsByTagName('script')[0];\n            s.parentNode.insertBefore(wf, s);\n        }());\n\n        ///////////////////////////////    \n\n        //  Build pixi scene\n\n        ///////////////////////////////\n\n        function build_scene() {\n\n            // append render to canvas\n            canvas.appendChild(renderer.view);\n\n            // set dispFilter to the stage\n            stage.filters = [dispFilter];\n            // stage.scale.set(2)\n\n            // enable cursorInteractive on mainContainer\n            mainContainer.interactive = true;\n\n            // apply rgbsplit effect on texts\n            if(options.textsRgbEffect == true) {\n\n                textsContainer.filters = [splitRgb];\n                textsSubContainer.filters = [splitRgb];\n\n                // set rgbSplitFilter to 0\n                splitRgb.red = [0, 0];\n                splitRgb.green = [0, 0];\n                splitRgb.blue = [0, 0];\n            }\n\n            if(options.cursorTextEffect == true) {\n                textsContainer.filters = [dispFilter_2, splitRgb];\n                textsSubContainer.filters = [dispFilter_2, splitRgb];\n            }\n            \n            // apply rgbsplit effect on imgs\n            if( (options.imagesRgbEffect == true) && (options.cursorImgEffect == true ) ) {\n\n                if(options.cursorImgEffect  == true) {\n                    imagesContainer.filters = [dispFilter_2, splitRgbImgs];\n                }\n\n                else {\n                    imagesContainer.filters = [splitRgbImgs];\n                }\n                \n                splitRgbImgs.red = [0, 0];\n                splitRgbImgs.green = [0, 0];\n                splitRgbImgs.blue = [0, 0];\n\n            }\n\n            else {\n                if(options.cursorImgEffect  == true) {\n                    imagesContainer.filters = [dispFilter_2];\n                }\n            }\n\n            // Displacement sprites and filters set up\n            dispSprite.texture.baseTexture.wrapMode = PIXI.WRAP_MODES.REPEAT;\n            dispFilter.autoFit = false;\n            dispFilter.padding = 0;\n            dispSprite_2.anchor.set(0.5);\n            dispFilter_2.scale.x = 0;\n            dispFilter_2.scale.y = 0;\n            \n            // renderer settings\n            renderer.view.style.objectFit = 'cover';\n            renderer.view.style.width = '100%';\n            renderer.view.style.height = '100%';\n            renderer.view.style.top = '50%';\n            renderer.view.style.left = '50%';\n            renderer.view.style.webkitTransform = 'translate( -50%, -50% ) scale(1.15)';\n            renderer.view.style.transform = 'translate( -50%, -50% ) scale(1.15)';\n            \n\n            //  Add children to the main container\n            mainContainer.addChild(imagesContainer, textsContainer, textsSubContainer, dispSprite_2);\n\n            // Add children to the stage = canvas\n            stage.addChild(mainContainer, dispSprite);\n\n            // pixi render animation\n            render = new PIXI.Ticker();\n            render.autoStart = true;\n            render.add(function(delta) {\n                renderer.render(stage);\n            });\n        }\n\n        \n        ///////////////////////////////    \n\n        //  Build pixi img elements\n\n        ///////////////////////////////\n\n        function build_imgs() {\n\n            for (let i = 0; i < options.slideImages.length; i++) {\n                \n                // get texture from image\n                texture = new PIXI.Texture.from(options.slideImages[i]);\n                // set sprite from texture\n                imgSprite = new PIXI.Sprite(texture);\n\n                // center img\n                imgSprite.anchor.set(0.5);\n                imgSprite.x = renderer.width / 2;\n                imgSprite.y = renderer.height / 2;\n                \n                // hide all imgs\n                TweenMax.set(imgSprite, {\n                    alpha: 0\n                });\n\n                // add img to the canvas\n                imagesContainer.addChild(imgSprite);\n            }\n\n            slideImages = imagesContainer.children;\n        }\n\n\n        ///////////////////////////////    \n\n        //  Build pixi texts elements\n\n        ///////////////////////////////\n\n        let titleSize;\n        let subtitleSize;\n        let subtitleOffsetTop;\n\n        function build_texts() {\n            \n            // make sure array is not empty\n            if(options.itemsTitles.length > 0) {\n\n                // build  titles\n                if( options.textsDisplay == true) {\n                    \n                    // set mobile font size based on window size\n                    if(window.innerWidth < 768) {\n                        titleSize = options.mobileTextTitleSize ;\n                        subtitleSize = options.mobileTextSubTitleSize;\n                        subtitleOffsetTop = options.mobileTextSubTitleOffsetTop; \n                    }\n                    else {\n                        titleSize = options.textTitleSize ;\n                        subtitleSize = options.textSubTitleSize;\n                        subtitleOffsetTop = options.textSubTitleOffsetTop; \n                    }\n\n                    for (let i = 0; i < options.itemsTitles.length; i++) {\n                        // get font family value from options array\n                        // we need to separate font-family and font-weight from titles and subtitles\n                        // ['Playfair Display:700', 'Roboto:400']\n                        // for first array, get string before :\n                        let font_1 = options.googleFonts[0].split(':')[0];\n                        let word_wrap;\n\n                        if(window.innerWidth < 768) {\n                            word_wrap = window.innerWidth * 1.5;\n                        }\n\n                        else {\n                            word_wrap = window.innerWidth / 2\n                        }\n\n                        // get string after :\n                        let fontWeight_1 = options.googleFonts[0].split(\":\").pop();\n                        textTitles = new PIXI.Text(options.itemsTitles[i][0], {\n                            fontFamily: font_1,\n                            fontSize: titleSize,\n                            fontWeight: fontWeight_1,\n                            fill:  options.textTitleColor,\n                            align: 'left',\n                            padding : 0, // todo : make it optionnable\n                            wordWrap: true, // todo : make it optionnable\n                            wordWrapWidth: word_wrap, // todo : make it optionnable\n                            letterSpacing: options.textTitleLetterspacing,\n                        });\n                        \n                        // texts centering\n                        textTitles.anchor.set(0.5);\n                        textTitles.x = renderer.width / 2;\n                        textTitles.y = renderer.height / 2;\n\n                        textsContainer.addChild(textTitles);\n                        \n                        // hide all titles on init\n                        TweenMax.set(textTitles, {\n                            alpha: 0\n                        });\n\n                        if(options.buttonMode == true) {\n\n                            textTitles.interactive = true;\n                            textTitles.buttonMode = true;\n\n                            // Pointers normalize touch and mouse\n                            textTitles.on('pointerdown', onClick);\n\n                            function onClick() {\n                                // do something on click\n                            }\n                        }\n                    }\n\n                    slideTexts = textsContainer.children;\n                    \n                    // build subtitles\n                    if( options.textsSubTitleDisplay == true) {\n\n                        for (let i = 0; i < options.itemsTitles.length; i++) {\n                            // get font family value from options array\n                            // we need to separate font-family and font-weight from titles and subtitles\n                            // ['Playfair Display:700', 'Roboto:400']\n                            // for second array, get string before :\n                            let font_2 = options.googleFonts[1].split(':')[0];\n                            // get string after :\n                            let fontWeight_2 = options.googleFonts[1].split(\":\").pop();\n                            let word_wrap;\n\n                            if(window.innerWidth < 768) {\n                                word_wrap = renderer.width / 1.5\n                            }\n\n                            else {\n                                word_wrap = renderer.width / 2\n                            }\n                            \n                            textTitles2 = new PIXI.Text(options.itemsTitles[i][1], {\n                                fontFamily: font_2,\n                                fontSize: subtitleSize,\n                                fontWeight: fontWeight_2,\n                                fill: options.textSubTitleColor,\n                                align: 'left',\n                                wordWrap: true,\n                                wordWrapWidth: word_wrap,\n                                letterSpacing: options.textSubTitleLetterspacing,\n                            });\n                            \n                            // texts centering\n                            textTitles2.anchor.set(0.5);\n                            textTitles2.x = textTitles.x;\n                             textTitles2.y = textTitles.y + subtitleOffsetTop;\n                            textsSubContainer.addChild(textTitles2);\n                            \n                            // hide all subtitles on init\n                            TweenMax.set(textTitles2, {\n                                alpha: 0\n                            });\n                        }\n\n                        slideTextsSub = textsSubContainer.children;\n                    }\n                }\n            }\n            \n        }\n\n        ///////////////////////////////    \n\n        //  Slide transition effect\n\n        ///////////////////////////////\n\n        function slideTransition(next) {\n\n            // center displacement\n            dispSprite.anchor.set(0.5);\n            dispSprite.x = renderer.view.width / 2;\n            dispSprite.y = renderer.view.height / 2;\n            \n            // set timeline with callbacks\n            timelineTransition = new TimelineMax({\n                onStart: function() {\n\n                    // update playing flag\n                    is_playing = true;\n                    // update draging flag\n                    is_swipping = false;\n\n                    dispSprite.rotation = 0;\n                },\n\n                onComplete: function() {\n                    \n                    // reset rgb values\n                    if(options.textsRgbEffect == true) {\n                        splitRgb.red = [0, 0];\n                        splitRgb.green = [0, 0];\n                        splitRgb.blue = [0, 0];\n                    }\n\n                    if(options.imagesRgbEffect == true) {\n                        splitRgbImgs.red = [0, 0];\n                        splitRgbImgs.green = [0, 0];\n                        splitRgbImgs.blue = [0, 0];\n                    }\n                    \n\n                    // update flags\n                    is_playing = false;\n                    is_swipping = false;\n\n                    // after the first transition\n                    // will prevent first animation transition\n                    is_loaded = true\n\n                    // set new index\n                    currentIndex = next;\n                },\n\n                onUpdate: function() {\n\n                    dispSprite.rotation =  options.transitionSpriteRotation; // frequency\n                    dispSprite.scale.set( timelineTransition.progress() * options.transitionScaleIntensity);\n\n                    if( is_loaded === true) {\n                        \n                        // rgb shift effect for navigation transition\n                        // if text rgb effect is enable\n                        if(options.textsRgbEffect == true) {\n\n                            // on first half of transition\n                            // match splitRgb values with timeline progress / from 0 to x\n                            if(timelineTransition.progress() < 0.5) {\n                                splitRgb.red = [timelineTransition.progress() * options.navTextsRgbIntensity, 0];\n                                splitRgb.green = [0, 0];\n                                splitRgb.blue = [(- ( timelineTransition.progress() )), 0];\n                            }\n                            // on second half of transition\n                            // match splitRgb values with timeline progress / from x to 0\n                            else {\n                                splitRgb.red = [-(options.navTextsRgbIntensity - timelineTransition.progress() * options.navTextsRgbIntensity), 0];\n                                splitRgb.green = [0, 0];\n                                splitRgb.blue = [( (options.navTextsRgbIntensity - timelineTransition.progress() * options.navTextsRgbIntensity)), 0];\n                            }\n                        }\n                        \n                        // if img rgb effect is enable\n                        if(options.imagesRgbEffect == true) {\n\n                            // on first half of transition\n                            // match splitRgb values with timeline progress / from 0 to x\n                            if(timelineTransition.progress() < 0.5) {\n                                splitRgbImgs.red = [-timelineTransition.progress() * options.navImagesRgbIntensity, 0];\n                                splitRgbImgs.green = [0, 0];\n                                splitRgbImgs.blue = [ ( timelineTransition.progress() ), 0];\n                            }\n                            \n                            // on second half of transition\n                            // match splitRgb values with timeline progress / from x to 0\n                            else {\n                                splitRgbImgs.red = [-(options.navImagesRgbIntensity - timelineTransition.progress() * options.navImagesRgbIntensity), 0];\n                                splitRgbImgs.green = [0, 0];\n                                splitRgbImgs.blue = [( (options.navImagesRgbIntensity - timelineTransition.progress() * options.navImagesRgbIntensity)), 0];\n\n                            }\n                        }\n                    }\n                }\n            });\n            \n            // make sure timeline is finish\n            timelineTransition.clear();\n            if (timelineTransition.isActive() ) {\n                return;\n            }\n\n            var scaleAmp;\n\n            // prevent first animation transition\n            if( is_loaded === false) {\n                scaleAmp = 0;\n            }\n            // the first transition is done > applly effect\n            else {\n                scaleAmp = options.transitionScaleAmplitude;\n            }\n            \n            // if titles and subtitles are active\n            if( (options.textsSubTitleDisplay  == true) && (options.textsDisplay == true) && (options.itemsTitles.length > 0) ) {\n\n                timelineTransition\n                    .to(dispFilter.scale, options.slideTransitionDuration, {\n                        x: scaleAmp,\n                        y: scaleAmp,\n                        ease: Power2.easeIn\n                    })\n                    .to([slideImages[currentIndex], slideTexts[currentIndex], slideTextsSub[currentIndex]], options.slideTransitionDuration, {\n                            alpha: 0,\n                            ease: Power2.easeOut\n                        }, options.slideTransitionDuration * 0.5)\n                    .to([slideImages[next], slideTexts[next], slideTextsSub[next]], options.slideTransitionDuration, {\n                            alpha: 1,\n                            ease: Power2.easeOut\n                        }, options.slideTransitionDuration * 0.5)\n                    .to(dispFilter.scale, options.slideTransitionDuration, {\n                        x: 0,\n                        y: 0,\n                        ease: Power1.easeOut\n                    }, options.slideTransitionDuration);\n            }\n\n            // if subtitles inactive and title active\n            else if( (options.textsSubTitleDisplay  == false) && (options.textsDisplay == true) && (options.itemsTitles.length > 0))  {\n\n                timelineTransition\n                    .to(dispFilter.scale, options.slideTransitionDuration, {\n                        x: scaleAmp,\n                        y: scaleAmp,\n                        ease: Power2.easeIn\n                    })\n                    .to([slideImages[currentIndex], slideTexts[currentIndex]], options.slideTransitionDuration, {\n                            alpha: 0,\n                            ease: Power2.easeOut\n                        }, options.slideTransitionDuration * 0.5)\n                    .to([slideImages[next], slideTexts[next]], options.slideTransitionDuration, {\n                            alpha: 1,\n                            ease: Power2.easeOut\n                        }, options.slideTransitionDuration * 0.5)\n                    .to(dispFilter.scale, options.slideTransitionDuration, {\n                        x: 0,\n                        y: 0,\n                        ease: Power1.easeOut\n                    }, options.slideTransitionDuration);\n            }\n            \n            else {\n                timelineTransition\n                    .to(dispFilter.scale, options.slideTransitionDuration , {\n                        x: scaleAmp,\n                        y: scaleAmp,\n                        ease: Power2.easeIn\n                    })\n                    .to(slideImages,  options.slideTransitionDuration, {\n                            alpha: 0,\n                            ease: Power2.easeOut\n                        }, options.slideTransitionDuration * 0.5)\n                    .to([slideImages[next]], options.slideTransitionDuration, {\n                            alpha: 1,\n                            ease: Power2.easeOut\n                        }, options.slideTransitionDuration * 0.5)\n                    .to(dispFilter.scale, options.slideTransitionDuration, {\n                        x: 0,\n                        y: 0,\n                        ease: Power1.easeOut\n                    }, options.slideTransitionDuration);\n            }\n        };\n\n        ///////////////////////////////    \n\n        //  Mouse move event\n\n        ///////////////////////////////\n\n        function cursorInteractive() {\n\n            // mousemove event\n            // because pixi stage has a 1.15 scale factor,\n            // we need to use native listener in order to get the real mouse coordinates (not affected by scale)\n            window.addEventListener(\"mousemove\", onPointerMove);\n            window.addEventListener(\"touchmove\", onTouchMove);\n\n            // track user mouse position\n            function onPointerMove(e) {\n                posx = e.clientX;\n                posy = e.clientY;\n            }\n\n            function onTouchMove(e) {\n                posx = e.touches[0].clientX;\n                posy = e.touches[0].clientY;\n            }\n            \n            // enable raf loop\n            mainLoop();\n        }\n\n        \n        ///////////////////////////////    \n\n        //  Main loop for animations\n\n        ///////////////////////////////\n\n        function mainLoop() {\n            \n            // enable raf animation\n            mainLoopID = requestAnimationFrame(mainLoop);\n\n            // if user is out of screen\n             if(posy <= 0 || posx <= 0 || (posx >=  (window.innerWidth - 2 ) || posy >= (window.innerHeight - 2 ))) {\n\n                is_moving = false;\n                // re-init values\n                posx = vx = window.innerWidth / 2;\n                posy = vy = window.innerHeight / 2;             \n                kineX = kineY = newkineX = newkineY = 0;\n\n            }\n\n            else {\n                 is_moving = true;\n            }\n\n            // get mouse position with momentum\n            vx += ((posx - vx) * options.cursorMomentum);\n            vy += ((posy - vy) * options.cursorMomentum);\n    \n            // update kineX / kineY based on posx / posy and vx / vy\n            kineX = Math.floor(posx - vx);\n            kineY = Math.floor(posy - vy);\n\n            // enable text tilt effect\n            if(options.textsTiltEffect == true) {\n                tilt( currentIndex, kineX, kineY )\n            }\n\n            // if flag has changed \n            if( is_moving === true ) {\n                // update cursor displacement sprite positions on cursor moving\n                dispSprite_2.x = vx;\n                dispSprite_2.y = vy ;\n\n                TweenMax.to(dispFilter_2.scale, 0.5, {\n                        x: kineX * options.cursorScaleIntensity,\n                        y: kineY *  options.cursorScaleIntensity,\n                        ease: Power4.easeOut\n                });\n            }\n\n            // make background displacement follow mouse position on transition events\n            if ((is_playing)) {\n                dispSprite.x = vx;\n                dispSprite.y = vy;\n            }\n     \n            // if user is swipping \n            if (is_swipping) {\n                \n                // update slide displacement sprite positions\n                dispSprite.x = vx;\n                dispSprite.y = vy;\n                // move displacement filter to cursor position \n                dispFilter.x = vx;\n                dispFilter.y = vy;\n                // map displacement filter scale value with user swipping intensity\n                dispFilter.scale.x = kineX * (options.swipeScaleIntensity);\n                dispFilter.scale. y = kineY * (options.swipeScaleIntensity);\n\n                // if text rgb effect enable\n                if(options.textsRgbEffect == true) {\n                    splitRgb.red = [(kineX * options.textsRgbIntensity), 0];\n                    splitRgb.green = [0, 0];\n                    splitRgb.blue = [(-kineX * options.textsRgbIntensity), 0];\n                }\n                // if img rgb effect enable\n                if(options.imagesRgbEffect == true) {\n                    splitRgbImgs.red = [(kineX * options.imagesRgbIntensity), 0];\n                    splitRgbImgs.green = [0, 0];\n                    splitRgbImgs.blue = [(-kineX * options.imagesRgbIntensity), 0];\n                } \n            }\n        }\n\n        ///////////////////////////////    \n\n        //  Drag / swipe event\n\n        ///////////////////////////////\n\n        function swipe() {\n\n            if(options.swipe == true) {\n\n                mainContainer\n                        .on('pointerdown', onDragStart)\n                        .on('pointerup', onDragEnd)\n                        .on('pointermove', onDragMove)\n            \n                // drag start\n                function onDragStart(event) {\n                    \n                    if (is_playing) {\n                        return;\n                    }\n                    \n                    // get event position as data\n                    this.data = event.data;\n                    drag_start = this.data.getLocalPosition(this.parent);\n\n                    // this.drag = true;\n                    is_swipping = true;\n\n                    // disable rgbSplit effect\n                    if(options.textsRgbEffect == true) {\n                        splitRgb.red = [0, 0];\n                        splitRgb.green = [0, 0];\n                        splitRgb.blue = [0, 0];\n                    }\n\n                    if(options.imagesRgbEffect == true) {\n                        splitRgbImgs.red = [0, 0];\n                        splitRgbImgs.green = [0, 0];\n                        splitRgbImgs.blue = [0, 0];\n                    }\n                }\n                \n                // drag end\n                function onDragEnd() {\n                    \n                    // make sure slide transition is not playing\n                    if (is_playing) {\n                        return;\n                    }\n                    \n                    // disable rgbSplit effect\n                    if(options.textsRgbEffect == true) {\n                        splitRgb.red = [0, 0];\n                        splitRgb.green = [0, 0];\n                        splitRgb.blue = [0, 0];\n                    }\n\n                    if(options.imagesRgbEffect == true) {\n                        splitRgbImgs.red = [0, 0];\n                        splitRgbImgs.green = [0, 0];\n                        splitRgbImgs.blue = [0, 0];\n                    }\n\n                    // reset displacement filter scale value to 0\n                    TweenMax.to(dispFilter.scale, 0.5, {\n                        x: 0,\n                        y: 0,\n                        ease: Power4.easeOut\n                    });\n\n                    // update dispFilter position \n                    TweenMax.to(dispFilter, 0.5, {\n                        x: vx,\n                        y: vy,\n                        ease: Power4.easeOut\n                    });\n\n                    // update swiping flag\n                    this.data = null;\n                    is_swipping = false; \n                }\n\n                // drag move > swipe\n                function onDragMove() {\n                    \n                    // make sure slide transition is completed and user is swipping\n                    if (is_playing) {\n                        return;\n                    }\n\n                    if (is_swipping) {\n\n                        // get the new position\n                        let newPosition = this.data.getLocalPosition(this.parent);\n                        \n                        // if user swipe the screen from left to right : next slide\n                        if ((drag_start.x - newPosition.x) < - options.swipeDistance) {\n                            if (currentIndex >= 0 && currentIndex < options.slideImages.length - 1) {\n                                slideTransition(currentIndex + 1);\n                            } else {\n                                slideTransition(0);\n                            }\n                        }\n                        \n                        // if user swipe from right to left : prev slide\n                        if ((drag_start.x - newPosition.x) > options.swipeDistance) {\n                            if (currentIndex > 0 && currentIndex < options.slideImages.length) {\n                                slideTransition(currentIndex - 1);\n                            } else {\n                                slideTransition(options.slideImages.length - 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        ///////////////////////////////    \n\n        //  Texts tilt effect\n\n        ///////////////////////////////\n\n        function tilt(currentIndex, kineX, kineY) {\n\n            if(options.itemsTitles.length > 0) {\n\n                if( options.textsDisplay == true) {\n\n                    TweenMax.to(slideTexts[currentIndex], 2, {\n                        x: (renderer.width / 2) - (kineX * 0.1),\n                        y: (renderer.height / 2) - (kineY * 0.2),\n                        ease: Expo.easeOut\n                    });\n\n                    if( options.textsSubTitleDisplay == true) {\n                        TweenMax.to(slideTextsSub[currentIndex], 2, {\n                            x: (renderer.width / 2) - (kineX * 0.25),\n                            y: (renderer.height / 2 + subtitleOffsetTop) - (kineY * 0.2),\n                            ease: Expo.easeOut\n                        });\n                    }\n                }\n            }\n        }\n\n        ///////////////////////////////    \n\n        //  navigation \n\n        ///////////////////////////////\n\n        if(options.nav == true) {\n\n            let nav = document.querySelectorAll('.main-nav');\n\n            for (let i = 0; i < nav.length; i++) {\n\n                let navItem = nav[i];\n\n                navItem.onclick = function(event) {\n\n                    // Make sure the previous transition has ended\n                    if (is_playing) {\n                        return false;\n                    }\n\n                    const active = document.querySelector('.active');\n\n                    if(active){\n                        active.classList.remove('active');\n                    }\n                      this.classList.add('active');\n\n                    if (this.getAttribute('data-nav') === 'next') {\n                        if (currentIndex >= 0 && currentIndex < options.slideImages.length - 1) {\n                            slideTransition(currentIndex + 1);\n                        } else {\n                            slideTransition(0);\n                        }\n                    } else {\n                        if (currentIndex > 0 && currentIndex < options.slideImages.length) {\n                            slideTransition(currentIndex - 1);\n                        } else {\n                            slideTransition(options.slideImages.length - 1);\n                        }\n                    }\n                    return false;\n                }\n            }\n        }\n\n        ///////////////////////////////    \n\n        //  init \n\n        ///////////////////////////////\n\n        function init() {\n            \n            // re init renderer on ready\n            renderer.resize(imgWidth,imgHeight);\n\n            // construct\n            build_scene();\n            build_imgs();\n            resizeTexts();\n\n            // interactivity\n            cursorInteractive();\n            swipe();\n            slideTransition(currentIndex);\n            \n            // Listen for window resize events\n            window.addEventListener('resize', resizeTexts);\n            function resizeTexts() {\n                // build_imgs();\n                if(window.innerWidth < 768) {\n                    build_texts();\n                    renderer.render(stage);\n                }\n\n                else {\n                    build_texts();\n                    renderer.render(stage);\n                }\n                \n            }\n        };\n\n        // Load them google fonts before starting...!\n        window.WebFontConfig = {\n            google: {\n                families: options.googleFonts\n            },\n\n            active: function() { \n                // load the stage images \n                imagesLoaded(images, function() {\n                    document.body.classList.remove('loading');\n                    // init slider\n                    init();\n                });\n            }\n        };\n    };\n})();\n\n\n\n\n\n\n\n\n","inputSourceMap":null}